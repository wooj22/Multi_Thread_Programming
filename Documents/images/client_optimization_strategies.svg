<svg viewBox="0 0 800 500" xmlns="http://www.w3.org/2000/svg">
  <!-- 제목 -->
  <text x="400" y="30" text-anchor="middle" font-size="20" font-weight="bold" fill="#333">게임 클라이언트 최적화 전략</text>
  
  <!-- 전략 1: 스레드 우선순위 -->
  <rect x="50" y="60" width="180" height="120" fill="#e74c3c" stroke="#c0392b" stroke-width="2" rx="5"/>
  <text x="140" y="85" text-anchor="middle" font-size="14" font-weight="bold" fill="white">스레드 우선순위</text>
  <text x="140" y="105" text-anchor="middle" font-size="12" fill="white">조정</text>
  <text x="60" y="125" font-size="10" fill="white">• 렌더링: 최고 우선순위</text>
  <text x="60" y="140" font-size="10" fill="white">• 입력 처리: 높은 우선순위</text>
  <text x="60" y="155" font-size="10" fill="white">• 파일 I/O: 낮은 우선순위</text>
  <text x="60" y="170" font-size="10" fill="white">• 백그라운드: 최저 우선순위</text>
  
  <!-- 전략 2: 작업 분할 -->
  <rect x="250" y="60" width="180" height="120" fill="#3498db" stroke="#2980b9" stroke-width="2" rx="5"/>
  <text x="340" y="85" text-anchor="middle" font-size="14" font-weight="bold" fill="white">작업 분할</text>
  <text x="340" y="105" text-anchor="middle" font-size="12" fill="white">(Time Slicing)</text>
  <text x="260" y="125" font-size="10" fill="white">• 무거운 작업을 여러 프레임에</text>
  <text x="260" y="140" font-size="10" fill="white">• 프레임당 시간 제한</text>
  <text x="260" y="155" font-size="10" fill="white">• yield return null 활용</text>
  <text x="260" y="170" font-size="10" fill="white">• 16ms 이하로 작업 분할</text>
  
  <!-- 전략 3: 비동기 처리 -->
  <rect x="450" y="60" width="180" height="120" fill="#27ae60" stroke="#229954" stroke-width="2" rx="5"/>
  <text x="540" y="85" text-anchor="middle" font-size="14" font-weight="bold" fill="white">비동기 처리</text>
  <text x="460" y="125" font-size="10" fill="white">• async/await 패턴</text>
  <text x="460" y="140" font-size="10" fill="white">• Task.Run() 활용</text>
  <text x="460" y="155" font-size="10" fill="white">• 백그라운드 스레드</text>
  <text x="460" y="170" font-size="10" fill="white">• 논블로킹 I/O</text>
  
  <!-- 전략 4: 캐시 최적화 -->
  <rect x="650" y="60" width="120" height="120" fill="#f39c12" stroke="#e67e22" stroke-width="2" rx="5"/>
  <text x="710" y="85" text-anchor="middle" font-size="14" font-weight="bold" fill="white">캐시 최적화</text>
  <text x="660" y="125" font-size="10" fill="white">• 데이터 지역성</text>
  <text x="660" y="140" font-size="10" fill="white">• 객체 풀링</text>
  <text x="660" y="155" font-size="10" fill="white">• 메모리 정렬</text>
  <text x="660" y="170" font-size="10" fill="white">• 프리팹 캐싱</text>
  
  <!-- 코드 예시 섹션 -->
  <rect x="50" y="220" width="700" height="250" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="5"/>
  <text x="400" y="245" text-anchor="middle" font-size="16" font-weight="bold" fill="#333">실제 구현 예시</text>
  
  <!-- Unity 예시 -->
  <rect x="70" y="260" width="330" height="190" fill="#2c3e50" stroke="#34495e" stroke-width="1" rx="3"/>
  <text x="235" y="280" text-anchor="middle" font-size="12" font-weight="bold" fill="#ecf0f1">Unity C# 최적화</text>
  
  <text x="80" y="300" font-size="10" font-family="monospace" fill="#a8d5ba">// 스레드 우선순위 설정</text>
  <text x="80" y="315" font-size="10" font-family="monospace" fill="#ecf0f1">Thread.CurrentThread.Priority = </text>
  <text x="80" y="330" font-size="10" font-family="monospace" fill="#ecf0f1">    ThreadPriority.Highest;</text>
  
  <text x="80" y="350" font-size="10" font-family="monospace" fill="#a8d5ba">// 작업 분할</text>
  <text x="80" y="365" font-size="10" font-family="monospace" fill="#ecf0f1">IEnumerator ProcessBigTask() {</text>
  <text x="80" y="380" font-size="10" font-family="monospace" fill="#ecf0f1">    for(int i = 0; i &lt; 1000; i += 10) {</text>
  <text x="80" y="395" font-size="10" font-family="monospace" fill="#ecf0f1">        ProcessBatch(i, i+10);</text>
  <text x="80" y="410" font-size="10" font-family="monospace" fill="#ecf0f1">        yield return null; // 다음 프레임</text>
  <text x="80" y="425" font-size="10" font-family="monospace" fill="#ecf0f1">    }</text>
  <text x="80" y="440" font-size="10" font-family="monospace" fill="#ecf0f1">}</text>
  
  <!-- C++ 예시 -->
  <rect x="420" y="260" width="330" height="190" fill="#2c3e50" stroke="#34495e" stroke-width="1" rx="3"/>
  <text x="585" y="280" text-anchor="middle" font-size="12" font-weight="bold" fill="#ecf0f1">Unreal C++ 최적화</text>
  
  <text x="430" y="300" font-size="10" font-family="monospace" fill="#a8d5ba">// 전용 렌더 스레드</text>
  <text x="430" y="315" font-size="10" font-family="monospace" fill="#ecf0f1">class FRenderThread : public FRunnable</text>
  <text x="430" y="330" font-size="10" font-family="monospace" fill="#ecf0f1">{</text>
  <text x="430" y="345" font-size="10" font-family="monospace" fill="#ecf0f1">    virtual uint32 Run() override</text>
  <text x="430" y="360" font-size="10" font-family="monospace" fill="#ecf0f1">    {</text>
  <text x="430" y="375" font-size="10" font-family="monospace" fill="#ecf0f1">        SetThreadPriority(</text>
  <text x="430" y="390" font-size="10" font-family="monospace" fill="#ecf0f1">            THREAD_PRIORITY_HIGHEST);</text>
  <text x="430" y="405" font-size="10" font-family="monospace" fill="#ecf0f1">        RenderFrame();</text>
  <text x="430" y="420" font-size="10" font-family="monospace" fill="#ecf0f1">        return 0;</text>
  <text x="430" y="435" font-size="10" font-family="monospace" fill="#ecf0f1">    }</text>
  <text x="430" y="450" font-size="10" font-family="monospace" fill="#ecf0f1">};</text>
</svg>